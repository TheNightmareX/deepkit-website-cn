import { Component } from '@angular/core';

@Component({
    template: `
        <div class="subline">Type</div>
        
        <h2>Getting Started</h2>
        
        <p>
            This is the documentation for Deepkit Type, a high-performance serializer, validator, change detector, 
            and reflection API for TypeScript. It the first solution on the market that makes the full set of TypeScript
            types available in the JavaScript runtime. By providing a rich reflection system library authors can
            build upon the emitted TypeScript types and build solutions that are deeply intertwined with TypeScript types.
        </p>
        
        <h3>Installation</h3>
        
        <textarea codeHighlight="bash">
            npm install @deepkit/type @deepkit/type-compiler
        </textarea>
        
        <p>
            Runtime type information are not generated by default. Set <code>"reflection": true</code> in the tsconfig.json
            to enable it in all files in the same folder of the tsconfig.json or in sub folders.
        </p>
        
        <textarea codeHighlight="json" title="tsconfig.json">
{
  "compilerOptions": {
    "outDir": "./dist/",
    "noImplicitAny": true,
    "module": "CommonJS",
    "target": "es6",
    "moduleResolution": "node",
    "experimentalDecorators": true,
  },
  "reflection": true
}
        </textarea>

        <p>
            If you want to use decorators, you should enable <code>experimentalDecorators</code> in the tsconfig.json. 
            This is not necessarily required to work with @deepkit/type, but for certain features in @deepkit/framework.
        </p>


        <h4>Type compiler</h4>
        
        <p>
            To make type information available in runtime, Deepkit uses a type compiler in the package <code>@deepkit/type-compiler</code>.
            It is a TypeScript transformer that reads your TypeScript and embeds the type information directly in the emitted JavaScript.
            To make this work, you need to install <code>@deepkit/type-compiler</code>.
        </p>

        <p>
            The transformer is automatically injected per default in the locally installed TypeScript
            (usually at <code>node_modules/typescript</code>). By automatically injecting it in your
            local typescript dependency, the transformer is executed automatically in your
            angular builds, tsc builds, webpack, ts-node, and much more. 
            To inject the transformer manually, run:
        </p>

        <textarea codeHighlight="bash">
            node_modules/.bin/deepkit-type-install
        </textarea>
        
        <p>
            Note that you have to run <code>deepkit-type-install</code> if you updated your local typescript version
            (for example when your typescript version in package.json changed and you run <code>npm install</code>).
        </p>
        
        <p>
            To remove the injected transformer, run the following command:
        </p>

        <textarea codeHighlight="bash">
            node_modules/.bin/deepkit-type-uninstall
        </textarea>

        <p>
            Note that you have to setup the transformer now manually in your build setup or you won't have type information
            in the runtime available.
        </p>
        
        <h4>Webpack</h4>
        
        <p>
            If you want to use the type compiler in your webpack build, you can do so using the package <code>ts-loader</code>
            (or any other typescript loader that supports registering transformers).
        </p>

        <textarea codeHighlight="javascript">
const typeCompiler = require('@deepkit/type-compiler');

module.exports = {
    entry: './app.ts',
    module: {
        rules: [
            {
                test: /\\.tsx?$/,
                use: {
                    loader: 'ts-loader',
                    options: {
                        //this enables @deepkit/type's type compiler
                        getCustomTransformers: (program, getProgram) => ({
                            before: [typeCompiler.transformer],
                            afterDeclarations: [typeCompiler.declarationTransformer],
                        }),
                    }
                },
                exclude: /node_modules/,
            },
        ],
    },
}
        </textarea>

        <h3>Using</h3>
        
        <textarea codeHighlight title="app.ts">
            import { deserialize } from '@deepkit/type';
            
            class MyModel {
                id: number = 0;

                created: Date = new Date;
            
                constructor(public name: string) {
                }
            }
            
            const myModel = deserialize<MyModel>({
                id: 23,
                created: 'Sat Oct 13 2018 14:17:35 GMT+0200',
                name: 'Peter',
            });
            
            console.log('Is MyModel?', myModel instanceof MyModel);
            console.log('Date converted?', myModel.created instanceof Date);
            console.log(myModel);
        </textarea>
        
        You can run this script using <code>ts-node app.ts</code>.
        
        <textarea codeHighlight>
            $ ts-node app.ts
            Is MyModel? true
            Date converted? true
            MyModel {
              name: 'Peter',
              id: 23,
              created: 2018-10-13T12:17:35.000Z
            }
        </textarea>
    `
})
export class DocTypeGettingStartedComponent {
}
